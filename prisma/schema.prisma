generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountTb {
  id          Int         @id @default(autoincrement())
  loginId     String      @map("login_id") @db.VarChar(30)
  password    String      @db.Char(60)
  email       String      @db.VarChar(256)
  name        String      @db.VarChar(10)
  phoneNumber String      @map("phone_number") @db.Char(11)
  profileImg  String      @map("profile_img")
  provider    String?     @db.VarChar(10)
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?   @map("deleted_at") @db.Timestamptz(6)
  commentTb   CommentTb[]
  postTb      PostTb[]
  replyTb     ReplyTb[]

  @@map("account_tb")
}

model CommentTb {
  id        Int       @id @default(autoincrement())
  accountId Int       @default(autoincrement()) @map("account_id")
  postId    Int       @default(autoincrement()) @map("post_id")
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  accountTb AccountTb @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_comment_tb")
  postTb    PostTb    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_comment_tb")
  replyTb   ReplyTb[]

  @@map("comment_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PostImgTb {
  id        Int      @id @default(autoincrement())
  postId    Int      @default(autoincrement()) @map("post_id")
  postImg   String?  @map("post_img")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  postTb    PostTb   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_post_img_tb")

  @@map("post_img_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PostTb {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(100)
  content   String
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  accountId Int         @default(autoincrement()) @map("account_id")
  deletedAt DateTime?   @map("deleted_at") @db.Timestamptz(6)
  commentTb CommentTb[]
  postImgTb PostImgTb[]
  accountTb AccountTb   @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_post_tb")

  @@map("post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ReplyTb {
  id        Int       @id @default(autoincrement())
  commentId Int       @default(autoincrement()) @map("comment_id")
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  accountId Int       @default(autoincrement()) @map("account_id")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  accountTb AccountTb @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_tb_to_reply_tb")
  commentTb CommentTb @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comment_tb_to_reply_tb")

  @@map("reply_tb")
}
